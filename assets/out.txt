[{"单一模式":"public class BasicSingleton {\n\n  static Singleton s1 = null, s2 = null;\n\n  public static void main(String[] args) {\n    s1 = Singleton.getInstance();\n    s2 = Singleton.getInstance();\n\n  }\n\n}\n\nclass Singleton {\n  private static Singleton mySingleton = null;\n\n  private Singleton() {\n  }\n\n  public static synchronized Singleton getInstance() {\n    if (null == mySingleton) {\n      mySingleton = new Singleton();\n      System.out.println(mySingleton.toString());\n    } else {\n      System.out.println(mySingleton.toString());\n\n    }\n    return mySingleton;\n\n  }\n}"},{"观察，可观察物体":"import java.util.Observable;\nimport java.util.Observer;\n\nclass MyObservable extends Observable {\n  public void drinkPotion() {\n    name = \"java2s \";\n    setChanged();\n    notifyObservers();\n  }\n  public String getName() {\n    return name;\n  }\n  private String name = \"java2s\";\n}\nclass Person implements Observer {\n  public Person(String name, String says) {\n    this.name = name;\n    this.says = says;\n  }\n  public void update(Observable thing, Object o) {\n    System.out.println(\"It's \" + ((MyObservable) thing).getName() + \"\\n\" + name + \": \" + says);\n  }\n  private String name;\n  private String says;\n}\npublic class MainClass {\n  public static void main(String[] args) {\n    MyObservable man = new MyObservable();\n    Observer[] crowd = { \n        new Person(\"A\", \"a\"),\n        new Person(\"B\", \"b\"),\n        new Person(\"C\", \"c\"),\n        new Person(\"D\", \"d\"),\n        new Person(\"E\", \"e\") };\n    for (Observer observer : crowd) {\n      man.addObserver(observer);\n    }\n    man.drinkPotion();\n  }\n}"},{"34. 3. 抽象工厂模式":"\ninterface Ball {\n  void action();\n}\n\ninterface Player {\n  void kick(Ball o);\n}\n\nclass PlayerA implements Player {\n  public void kick(Ball ob) {\n    System.out.print(\"Player A\");\n    ob.action();\n  }\n}\n\nclass PlayerB implements Player {\n  public void kick(Ball ob) {\n    System.out.print(\"Player B\");\n    ob.action();\n  }\n}\n\nclass BasketBall implements Ball {\n  public void action() {\n    System.out.println(\"Hand pass\");\n  }\n}\n\nclass Football implements Ball {\n  public void action() {\n    System.out.println(\"Foot pass\");\n  }\n}\n\n// The Abstract Factory:\ninterface AbstractGameFactory {\n  Player makePlayer();\n\n  Ball makeObstacle();\n}\n\n// Concrete factories:\nclass BasketBallFactory implements AbstractGameFactory {\n  public Player makePlayer() {\n    return new PlayerA();\n  }\n\n  public Ball makeObstacle() {\n    return new BasketBall();\n  }\n}\n\nclass FootballFactory implements AbstractGameFactory {\n  public Player makePlayer() {\n    return new PlayerB();\n  }\n\n  public Ball makeObstacle() {\n    return new Football();\n  }\n}\n\nclass Match {\n  private Player p;\n\n  private Ball ob;\n\n  public Match(AbstractGameFactory factory) {\n    p = factory.makePlayer();\n    ob = factory.makeObstacle();\n  }\n\n  public void play() {\n    p.kick(ob);\n  }\n}\n\npublic class Games {\n  public static void main(String args[]) {\n    AbstractGameFactory kp = new BasketBallFactory(), kd = new FootballFactory();\n    Match g1 = new Match(kp), g2 = new Match(kd);\n    g1.play();\n    g2.play();\n  }\n}"},{"34. 4. 1. 适配器模式演示":"class Target {\n  public void request() {\n  }\n}\n\nclass Adaptee {\n  public void specificRequest() {\n    System.out.println(\"Adaptee: SpecificRequest\");\n  }\n}\n\nclass Adapter extends Target {\n  private Adaptee adaptee;\n\n  public Adapter(Adaptee a) {\n    adaptee = a;\n  }\n\n  public void request() {\n    adaptee.specificRequest();\n  }\n}\n\npublic class SimpleAdapter {\n  public static void main(String args[]) {\n    Adaptee a = new Adaptee();\n    Target t = new Adapter(a);\n    t.request();\n  }\n}"},{"桥模式":"class Abstraction {\n  private Task task;\n\n  public Abstraction(Task imp) {\n    task = imp;\n  }\n\n  public void service1() {\n    task.task1();\n    task.task2();\n  }\n\n  public void service2() {\n    task.task2();\n    task.task3();\n  }\n\n  public void service3() {\n    task.task1();\n    task.task2();\n    task.task4();\n  }\n\n  protected Task getImplementation() {\n    return task;\n  }\n}\n\nclass ClientService1 extends Abstraction {\n  public ClientService1(Task imp) {\n    super(imp);\n  }\n\n  public void serviceA() {\n    service1();\n    service2();\n  }\n\n  public void serviceB() {\n    service3();\n  }\n}\n\nclass ClientService2 extends Abstraction {\n  public ClientService2(Task imp) {\n    super(imp);\n  }\n\n  public void serviceC() {\n    service2();\n    service3();\n  }\n\n  public void serviceD() {\n    service1();\n    service3();\n  }\n\n  public void serviceE() {\n    getImplementation().task3();\n  }\n}\n\ninterface Task {\n  void task1();\n\n  void task2();\n\n  void task3();\n\n  void task4();\n}\n\nclass Integration1 {\n  public void method1() {\n    System.out.println(\"Integration1.method1()\");\n  }\n\n  public void method2() {\n    System.out.println(\"Integration1.method2()\");\n  }\n}\n\nclass Integration {\n  public void operation1() {\n    System.out.println(\"Integration.operation1()\");\n  }\n\n  public void operation2() {\n    System.out.println(\"Integration.operation2()\");\n  }\n\n  public void operation3() {\n    System.out.println(\"Integration.operation3()\");\n  }\n}\n\nclass Implementation1 implements Task {\n  private Integration1 delegate = new Integration1();\n\n  public void task1() {\n    System.out.println(\"Implementation1.facility1\");\n    delegate.method1();\n  }\n\n  public void task2() {\n    System.out.println(\"Implementation1.facility2\");\n    delegate.method2();\n  }\n\n  public void task3() {\n    System.out.println(\"Implementation1.facility3\");\n    delegate.method2();\n    delegate.method1();\n  }\n\n  public void task4() {\n    System.out.println(\"Implementation1.facility4\");\n    delegate.method1();\n  }\n}\n\nclass Implementation2 implements Task {\n  private Integration delegate = new Integration();\n\n  public void task1() {\n    System.out.println(\"Implementation2.facility1\");\n    delegate.operation1();\n  }\n\n  public void task2() {\n    System.out.println(\"Implementation2.facility2\");\n    delegate.operation2();\n  }\n\n  public void task3() {\n    System.out.println(\"Implementation2.facility3\");\n    delegate.operation3();\n  }\n\n  public void task4() {\n    System.out.println(\"Implementation2.facility4\");\n    delegate.operation1();\n  }\n}\n\npublic class BridgeStructure {\n  public static void main(String[] args) {\n    ClientService1 cs1 = new ClientService1(new Implementation1());\n    cs1.serviceA();\n    cs1.serviceB();\n    cs1 = new ClientService1(new Implementation2());\n    cs1.serviceA();\n    cs1.serviceB();\n    ClientService2 cs2 = new ClientService2(new Implementation1());\n    cs2.serviceC();\n    cs2.serviceD();\n    cs2.serviceE();\n    cs2 = new ClientService2(new Implementation2());\n    cs2.serviceC();\n    cs2.serviceD();\n    cs2.serviceE();\n  }\n}"},{"34. 6. 1. 构建模式":"import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\n\nclass Office extends ArrayList<OfficeUnit> {\n}\n\nclass Word extends Office {\n}\n\nclass PPT extends Office {\n}\n\nclass Excel extends Office {\n}\n\nclass OfficeUnit {\n  private String s;\n\n  public OfficeUnit(String s) {\n    this.s = s;\n  }\n\n  public String toString() {\n    return s;\n  }\n}\n\nclass DocumentPage extends OfficeUnit {\n  public DocumentPage(String s) {\n    super(s);\n  }\n}\n\nclass PPTSlide extends OfficeUnit {\n  public PPTSlide(String s) {\n    super(s);\n  }\n}\n\nclass ExcelWorkbook extends OfficeUnit {\n  public ExcelWorkbook(String s) {\n    super(s);\n  }\n}\n\nclass OfficeBuilder {\n  public void buildBase() {\n  }\n\n  public void addOfficeUnit(OfficeUnit item) {\n  }\n\n  public Office getFinishedMedia() {\n    return null;\n  }\n}\n\nclass WordBuilder extends OfficeBuilder {\n  private Word b;\n\n  public void buildBase() {\n    System.out.println(\"Building word framework\");\n    b = new Word();\n  }\n\n  public void addOfficeUnit(OfficeUnit chapter) {\n    System.out.println(\"Adding word page \" + chapter);\n    b.add(chapter);\n  }\n\n  public Office getFinishedMedia() {\n    return b;\n  }\n}\n\nclass PPTBuilder extends OfficeBuilder {\n  private PPT m;\n\n  public void buildBase() {\n    System.out.println(\"Building PPT\");\n    m = new PPT();\n  }\n\n  public void addOfficeUnit(OfficeUnit article) {\n    System.out.println(\"Adding slide\" + article);\n    m.add(article);\n  }\n\n  public Office getFinishedMedia() {\n    return m;\n  }\n}\n\nclass ExcelBuilder extends OfficeBuilder {\n  private Excel w;\n\n  public void buildBase() {\n    System.out.println(\"Building Excel\");\n    w = new Excel();\n  }\n\n  public void addOfficeUnit(OfficeUnit webItem) {\n    System.out.println(\"Adding workbook\" + webItem);\n    w.add(webItem);\n  }\n\n  public Office getFinishedMedia() {\n    return w;\n  }\n}\n\nclass OfficeDirector {\n  private OfficeBuilder mb;\n\n  public OfficeDirector(OfficeBuilder mb) {\n    this.mb = mb; \n  }\n\n  public Office produceMedia(List input) {\n    mb.buildBase();\n    for (Iterator it = input.iterator(); it.hasNext();)\n      mb.addOfficeUnit((OfficeUnit) it.next());\n    return mb.getFinishedMedia();\n  }\n};\n\npublic class BuildOfficeDemo {\n\n  public static void main(String[] args) {\n    List input = Arrays.asList(new OfficeUnit[] { new OfficeUnit(\"item1\"), new OfficeUnit(\"item2\"),\n        new OfficeUnit(\"item3\"), new OfficeUnit(\"item4\"), });\n\n    OfficeDirector buildBook = new OfficeDirector(new WordBuilder());\n    Office word = buildBook.produceMedia(input);\n    String result = \"word: \" + word;\n    System.out.println(result);\n\n    OfficeDirector buildMagazine = new OfficeDirector(new PPTBuilder());\n    Office ppt = buildMagazine.produceMedia(input);\n    result = \"PPT: \" + ppt;\n    System.out.println(result);\n\n    OfficeDirector buildWebSite = new OfficeDirector(new ExcelBuilder());\n    Office excel = buildWebSite.produceMedia(input);\n    result = \"Excel: \" + excel;\n    System.out.println(result);\n  }\n}"},{"命令模式：选择行动":"import java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\ninterface Command {\n  void execute();\n}\n\nclass NewDocument implements Command {\n  public void execute() {\n    System.out.print(\"NewDocument \");\n  }\n}\n\nclass SaveDocument implements Command {\n  public void execute() {\n    System.out.print(\"SaveDocument! \");\n  }\n}\n\nclass UpdateDocument implements Command {\n  public void execute() {\n    System.out.print(\"UpdateDocument\");\n  }\n}\n\nclass Macro {\n  private List commands = new ArrayList();\n\n  public void add(Command c) {\n    commands.add(c);\n  }\n\n  public void run() {\n    Iterator it = commands.iterator();\n    while (it.hasNext())\n      ((Command) it.next()).execute();\n  }\n}\n\npublic class CommandPattern {\n\n  public static void main(String args[]) {\n\n    Macro macro = new Macro();\n\n    macro.add(new NewDocument());\n    macro.add(new SaveDocument());\n    macro.add(new UpdateDocument());\n    macro.run();\n\n  }\n\n}"},{"结构复合模式":"import java.util.ArrayList;\nimport java.util.Iterator;\n\ninterface Movable {\n  void operation();\n}\n\nclass File implements Movable {\n  private String name;\n\n  public File(String name) {\n    this.name = name;\n  }\n\n  public String toString() {\n    return name;\n  }\n\n  public void operation() {\n    System.out.println(this);\n  }\n}\n\nclass FileTree extends ArrayList<Movable> implements Movable {\n  private String name;\n\n  public FileTree(String name) {\n    this.name = name;\n  }\n\n  public String toString() {\n    return name;\n  }\n\n  public void operation() {\n    System.out.println(this);\n    for (Iterator<Movable> it = iterator(); it.hasNext();)\n      it.next().operation();\n  }\n}\n\npublic class CompositeStructure {\n  public static void main(String args[]) {\n    FileTree root = new FileTree(\"root\");\n    root.add(new File(\"Leaf1\"));\n    FileTree c2 = new FileTree(\"Node1\");\n    c2.add(new File(\"Leaf2\"));\n    c2.add(new File(\"Leaf3\"));\n    root.add(c2);\n    c2 = new FileTree(\"Node2\");\n    c2.add(new File(\"Leaf4\"));\n    c2.add(new File(\"Leaf5\"));\n    root.add(c2);\n    root.operation();\n  }\n}"},{"34. 10. 1. 装饰模式":"interface Countable {\n  String getName();\n\n  float getCount();\n}\n\nclass Book implements Countable {\n  public String getName() {\n    return \"Book\";\n  }\n\n  public float getCount() {\n    return 0;\n  }\n}\n\nabstract class Number implements Countable {\n  protected Countable component;\n\n  Number(Countable component) {\n    this.component = component;\n  }\n\n  public float getCount() {\n    return component.getCount();\n  }\n\n  public abstract String getName();\n}\n\nclass Integer extends Number {\n  private float value = 0.75f;\n\n  private String description = \" integer\";\n\n  public Integer(Countable component) {\n    super(component);\n  }\n\n  public float getCount() {\n    return component.getCount() + value;\n  }\n\n  public String getName() {\n    return component.getName() + description;\n  }\n}\n\nclass Float extends Number {\n\n  private String description = \" float\";\n\n  public Float(Countable component) {\n    super(component);\n  }\n\n  public String getName() {\n    return component.getName() + description;\n\n  }\n}\n\nclass Double extends Number {\n  private float value = 0.25f;\n\n  private String description = \" double\";\n\n  public Double(Countable component) {\n    super(component);\n  }\n\n  public float getCount() {\n    return component.getCount() + value;\n  }\n\n  public String getName() {\n    return component.getName() + description;\n  }\n}\n\nclass Decimal extends Number {\n  private float value = 0.25f;\n\n  private String description = \" decimal\";\n\n  public Decimal(Countable component) {\n    super(component);\n  }\n\n  public float getCount() {\n    return component.getCount() + value;\n  }\n\n  public String getName() {\n    return component.getName() + description;\n  }\n}\n\nclass Positive extends Number {\n  private float cost = 0.25f;\n\n  private String description = \" positive\";\n\n  public Positive(Countable component) {\n    super(component);\n  }\n\n  public float getCount() {\n    return component.getCount() + cost;\n  }\n\n  public String getName() {\n    return component.getName() + description;\n  }\n}\n\nclass Negative extends Number {\n\n  private float value = -0.25f;\n\n  private String description = \" negative\";\n\n  public Negative(Countable component) {\n    super(component);\n  }\n\n  public float getCount() {\n    return component.getCount() + value;\n  }\n\n  public String getName() {\n    return component.getName() + description;\n  }\n\n}\n\npublic class NumberCountableDemo {\n  public static void main(String[] args) {\n    Countable cappuccino = new Integer(new Double(new Book()));\n    System.out.println(cappuccino.getName().trim() + \": $\" + cappuccino.getCount());\n    Countable cafeMocha = new Integer(new Decimal(new Negative(new Positive(new Float(\n        new Book())))));\n    System.out.println(cafeMocha.getName().trim() + \": $\" + cafeMocha.getCount());\n  }\n}"},{"34. 11. 门面模式":"class A {\n  public A(int x) {\n  }\n}\n\nclass B {\n  public B(long x) {\n  }\n}\n\nclass C {\n  public C(double x) {\n  }\n}\n\npublic class Facade {\n  static A makeA(int x) {\n    return new A(x);\n  }\n\n  static B makeB(long x) {\n    return new B(x);\n  }\n\n  static C makeC(double x) {\n    return new C(x);\n  }\n\n  public static void main(String args[]) {\n    // The client programmer gets the objects by calling the static methods:\n    A a = Facade.makeA(1);\n    B b = Facade.makeB(1);\n    C c = Facade.makeC(1.0);\n  }\n}\n"},{"34. 12. 工厂模式":"import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\n\nabstract class Shape {\n  public abstract void draw();\n\n  public abstract void erase();\n\n  public static Shape factory(String type) {\n    if (type.equals(\"Circle\"))\n      return new Circle();\n    if (type.equals(\"Square\"))\n      return new Square();\n    throw new RuntimeException(\"Bad shape creation: \" + type);\n  }\n}\n\nclass Circle extends Shape {\n  Circle() {\n  } // Package-access constructor\n\n  public void draw() {\n    System.out.println(\"Circle.draw\");\n  }\n\n  public void erase() {\n    System.out.println(\"Circle.erase\");\n  }\n}\n\nclass Square extends Shape {\n  Square() {\n  } // Package-access constructor\n\n  public void draw() {\n    System.out.println(\"Square.draw\");\n  }\n\n  public void erase() {\n    System.out.println(\"Square.erase\");\n  }\n}\n\npublic class ShapeFactory {\n  public static void main(String args[]) {\n    List<Shape> shapes = new ArrayList<Shape>();\n    Iterator it = Arrays.asList(\n        new String[] { \"Circle\", \"Square\", \"Square\", \"Circle\", \"Circle\", \"Square\" }).iterator();\n    while (it.hasNext())\n      shapes.add(Shape.factory((String) it.next()));\n\n    it = shapes.iterator();\n    \n    while (it.hasNext()) {\n      Shape s = (Shape) it.next();\n      s.draw();\n      s.erase();\n    }\n  }\n}"},{"34. 13. 1. \t迭代器模式":"import java.util.ArrayList;\nimport java.util.Iterator;\n\npublic class TestCorporation {\n  public static void main(String args[]) {\n    Corporation corporation = new Corporation();\n\n    Division rnd = new Division(\"R&D\");\n    rnd.add(new VP(\"A\", \"R&D\"));\n    rnd.add(new VP(\"B\", \"R&D\"));\n    rnd.add(new VP(\"C\", \"R&D\"));\n\n    Division sales = new Division(\"Sales\");\n\n    sales.add(new VP(\"E\", \"Sales\"));\n    sales.add(new VP(\"F\", \"Sales\"));\n    sales.add(new VP(\"G\", \"Sales\"));\n    sales.add(new VP(\"F\", \"Sales\"));\n\n    Division western = new Division(\"Sales\");\n    western.add(new VP(\"W\", \"Sales\"));\n    western.add(new VP(\"Z\", \"Sales\"));\n\n    sales.add(western);\n\n    VP vp = new VP(\"Cary\", \"At Large\");\n\n    corporation.add(rnd);\n    corporation.add(sales);\n    corporation.add(vp);\n\n    corporation.print();\n  }\n}\n\nclass Corporation extends Corporate {\n  private ArrayList<Corporate> corporate = new ArrayList<Corporate>();\n\n\n  public Corporation() {\n  }\n\n  public void add(Corporate c) {\n    corporate.add(c);\n  }\n\n  public void print() {\n    Iterator iterator = corporate.iterator();\n\n    while (iterator.hasNext()) {\n      Corporate c = (Corporate) iterator.next();\n      c.print();\n    }\n  }\n}\n\nabstract class Corporate {\n  public String getName() {\n    return \"\";\n  }\n\n  public void add(Corporate c) {\n  }\n\n  public Iterator iterator() {\n    return null;\n  }\n\n  public void print() {\n  }\n}\n\nclass Division extends Corporate {\n  private Corporate[] corporate = new Corporate[100];\n  private int number = 0;\n  private String name;\n\n  public Division(String n) {\n    name = n;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void add(Corporate c) {\n    corporate[number++] = c;\n  }\n\n  public Iterator iterator() {\n    return new DivisionIterator(corporate);\n  }\n\n  public void print() {\n    Iterator iterator = iterator();\n\n    while (iterator.hasNext()) {\n      Corporate c = (Corporate) iterator.next();\n      c.print();\n    }\n  }\n}\n\nclass VP extends Corporate {\n  private String name;\n  private String division;\n\n  public VP(String n, String d) {\n    name = n;\n    division = d;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void print() {\n    System.out.println(\"Name: \" + name + \" Division: \" + division);\n  }\n\n  public Iterator iterator() {\n    return new VPIterator(this);\n  }\n\n}\n\nclass VPIterator implements Iterator {\n  private VP vp;\n\n  public VPIterator(VP v) {\n    vp = v;\n  }\n\n  public VP next() {\n    return vp;\n  }\n\n  public boolean hasNext() {\n    return false;\n  }\n\n  public void remove() {\n  }\n}\n\nclass DivisionIterator implements Iterator {\n  private Corporate[] corporate;\n  private int location = 0;\n\n  public DivisionIterator(Corporate[] c) {\n    corporate = c;\n  }\n\n  public Corporate next() {\n    return corporate[location++];\n  }\n\n  public boolean hasNext() {\n    if (location < corporate.length && corporate[location] != null) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  public void remove() {\n  }\n}"},{"34. 14. 1. \t调解模式":"public class Mediator {\n  Welcome welcome;\n  Browse browse;\n  Purchase purchase;\n  Exit exit;\n\n  public Mediator() {\n    welcome = new Welcome(this);\n    browse = new Browse(this);\n    purchase = new Purchase(this);\n    exit = new Exit(this);\n  }\n\n  public void handle(String state) {\n    if (state.equals(\"welcome.shop\")) {\n      browse.execute();\n    } else if (state.equals(\"shop.purchase\")) {\n      purchase.execute();\n    } else if (state.equals(\"purchase.exit\")) {\n      exit.execute();\n    } else if (state.equals(\"welcome.exit\")) {\n      exit.execute();\n    } else if (state.equals(\"shop.exit\")) {\n      exit.execute();\n    } else if (state.equals(\"purchase.exit\")) {\n      exit.execute();\n    }\n  }\n\n  public Welcome getWelcome() {\n    return welcome;\n  }\n  public static void main(String args[]) {\n    Mediator mediator = new Mediator();\n    mediator.getWelcome().execute();\n  }\n\n}\n\nclass Exit {\n  Mediator mediator;\n\n  public Exit(Mediator m) {\n    mediator = m;\n  }\n\n  public void execute() {\n    System.out.println(\"exit\");\n  }\n}\n\nclass Browse {\n  Mediator mediator;\n\n  public Browse(Mediator m) {\n    mediator = m;\n  }\n\n  public void execute() {\n    mediator.handle(\"shop.purchase\");\n    mediator.handle(\"shop.exit\");\n  }\n}\n\nclass Welcome {\n  Mediator mediator;\n\n  public Welcome(Mediator m) {\n    mediator = m;\n  }\n\n  public void execute() {\n    mediator.handle(\"welcome.shop\");\n    mediator.handle(\"welcome.exit\");\n  }\n}\n\nclass Purchase {\n  Mediator mediator;\n\n  public Purchase(Mediator m) {\n    mediator = m;\n  }\n\n  public void execute() {\n    System.out.println(\"Thanks for your purchase.\");\n    mediator.handle(\"purchase.exit\");\n  }\n}"},{"34. 15. 1. 原型模式演示":"public class PrototypeDemo {\n\n  private Message message;\n\n  PrototypeDemo(Message message) {\n    this.message = message;\n  }\n\n  Message makeMessage() {\n    return this.message.makeCopy();\n  }\n\n  public static void main(String[] args) {\n    Message prototype = new EmailMessage();\n    PrototypeDemo demo = new PrototypeDemo(prototype);\n    System.out.println(\"Message \" + demo.makeMessage());\n  }\n}\n\nabstract class Message {\n\n  public Message makeCopy() {\n    try {\n      return this.getClass().newInstance();\n    } catch (InstantiationException e) {\n      return null;\n    } catch (IllegalAccessException e) {\n      return null;\n    }\n  }\n}\n\nclass EmailMessage extends Message {\n\n  @Override\n  public String toString() {\n    return \"EmailMessage\";\n  }\n\n}\n"},{"34. 16. 代理模式":"interface ProxyBase {\n  void taskOne();\n\n  void taskTwo();\n\n  void taskThree();\n}\nclass Implementation implements ProxyBase {\n  public void taskOne() {\n    System.out.println(\"Implementation.f()\");\n  }\n  public void taskTwo() {\n    System.out.println(\"Implementation.g()\");\n  }\n  public void taskThree() {\n    System.out.println(\"Implementation.h()\");\n  }\n}\nclass Proxy implements ProxyBase {\n  private ProxyBase implementation;\n\n  public Proxy() {\n    implementation = new Implementation();\n  }\n\n  public void taskOne() {\n    implementation.taskOne();\n  }\n\n  public void taskTwo() {\n    implementation.taskTwo();\n  }\n\n  public void taskThree() {\n    implementation.taskThree();\n  }\n}\n\n\n\npublic class ProxyDemo {\n  public static void main(String args[]) {\n    Proxy p = new Proxy();\n    p.taskOne();\n    p.taskTwo();\n    p.taskThree();\n  }\n}"},{"34. 16. 3. 动态代理":"import java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\n\ninterface MyClass {\n\n  void methodA(String s);\n\n  void methodB(int i);\n\n  String methodC(int i, String s);\n\n}\n\npublic class DynamicProxyDemo {\n\n  public static void main(String[] clargs) {\n    MyClass prox = (MyClass) Proxy.newProxyInstance(MyClass.class.getClassLoader(), new Class[] { MyClass.class },\n        new InvocationHandler() {\n          public Object invoke(Object proxy, Method method, Object[] args) {\n            System.out.println(\"Method = \" + method);\n            if (args != null) {\n              System.out.println(\"args = \");\n              for (int i = 0; i < args.length; i++)\n                System.out.println(\"\\t\" + args[i]);\n            }\n            return null;\n          }\n        });\n    System.out.println(\"about to call methodA\");\n    prox.methodA(\"hello\");\n    System.out.println(\"finish calling methodA\");\n    prox.methodB(47);\n    prox.methodC(47, \"hello\");\n  }\n}"},{"34. 17. 状态模式":"interface Animal {\n  String talk();\n}\n\nclass Frog implements Animal {\n  public String talk() {\n    return \"ggg!\";\n  }\n}\n\nclass Cat implements Animal {\n  public String talk() {\n    return \"miao\";\n  }\n}\n\nclass Creature {\n  private Animal state = new Frog();\n\n  public void greet() {\n    System.out.println(state.talk());\n  }\n  public void toCat() {\n    state = new Cat();\n  }\n}\n\npublic class MainClass {\n\n  public static void main(String args[]) {\n    Creature creature = new Creature();\n    creature.greet();\n    creature.toCat();\n    creature.greet();\n  }\n}"},{"34. 18. 1. 策略模式：在运行时选择算法":"interface Find {\n  double[] algorithm(double[] line);\n}\n\nclass FindMethodA implements Find {\n  public double[] algorithm(double[] line) {\n    return new double[] { 1 };\n  }\n}\nclass FindMethodB implements Find {\n  public double[] algorithm(double[] line) {\n    return new double[] { 2 };\n  }\n}\n\nclass FindMethodC implements Find {\n  public double[] algorithm(double[] line) {\n    return new double[] { 3 };\n  }\n}\nclass FindMethodD implements Find {\n  public double[] algorithm(double[] line) {\n    return new double[] { 4 };\n  }\n}\nclass MySolver {\n  private Find strategy;\n  public MySolver(Find strat) {\n    strategy = strat;\n  }\n  double[] get(double[] line) {\n    return strategy.algorithm(line);\n  }\n  void changeAlgorithm(Find newAlgorithm) {\n    strategy = newAlgorithm;\n  }\n}\n\npublic class StrategyPattern {\n  public static void main(String args[]) {\n    MySolver solver = new MySolver(new FindMethodA());\n    double[] line = { 1.0, 2.0, 1.0, 2.0, -1.0, 3.0, 4.0, 5.0, 4.0 };\n    solver.get(line);\n    solver.changeAlgorithm(new FindMethodC());\n    solver.get(line);\n  }\n}"},{"34. 19. 模板模式":"abstract class ApplicationFramework {\n  public ApplicationFramework() {\n    templateMethod(); // Dangerous!\n  }\n\n  abstract void customize1();\n\n  abstract void customize2();\n\n  final void templateMethod() {\n    for (int i = 0; i < 5; i++) {\n      customize1();\n      customize2();\n    }\n  }\n}\n\nclass MyApp extends ApplicationFramework {\n  void customize1() {\n    System.out.print(\"Hello \");\n  }\n\n  void customize2() {\n    System.out.println(\"World!\");\n  }\n}\n\npublic class TemplateMethod {\n\n  public static void main(String args[]) {\n    MyApp app = new MyApp();\n  }\n}"}]